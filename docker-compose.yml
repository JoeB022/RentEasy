version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: renteasy-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: renteasy
      POSTGRES_USER: renteasy
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-renteasy_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - renteasy-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U renteasy -d renteasy"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: renteasy-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - renteasy-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 10s

  # RentEasy Backend
  web:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: renteasy-backend
    restart: unless-stopped
    environment:
      # Flask Configuration
      FLASK_ENV: production
      FLASK_APP: wsgi.py
      
      # Database Configuration
      DATABASE_URL: postgresql://renteasy:${POSTGRES_PASSWORD:-renteasy_password}@postgres:5432/renteasy
      
      # Redis Configuration
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/0
      
      # Security (MUST be set in production)
      SECRET_KEY: ${SECRET_KEY}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      
      # CORS Configuration
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:3000}
      
      # Sentry Configuration (optional)
      SENTRY_DSN: ${SENTRY_DSN:-}
      
      # Logging
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      
    ports:
      - "8000:8000"
    volumes:
      - ./logs:/app/logs
    networks:
      - renteasy-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # pgAdmin (Database Management)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: renteasy-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@renteasy.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin_password}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    ports:
      - "5050:80"
    networks:
      - renteasy-network
    depends_on:
      - postgres
    profiles:
      - tools  # Only start with --profile tools

  # Redis Commander (Redis Management)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: renteasy-redis-commander
    restart: unless-stopped
    environment:
      REDIS_HOSTS: local:redis:6379:0:${REDIS_PASSWORD:-redis_password}
    ports:
      - "8081:8081"
    networks:
      - renteasy-network
    depends_on:
      - redis
    profiles:
      - tools  # Only start with --profile tools

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  renteasy-network:
    driver: bridge